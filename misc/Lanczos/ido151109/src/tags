!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
APFlag	global.h	/^int APFlag; \/* 0: periodic, 1: anti-periodic *\/$/;"	v
BurnEleCfg	global.h	/^int *BurnEleCfg;$/;"	v
BurnEleIdx	global.h	/^int *BurnEleIdx;$/;"	v
BurnEleNum	global.h	/^int *BurnEleNum;$/;"	v
BurnEleProjCnt	global.h	/^int *BurnEleProjCnt;$/;"	v
BurnFlag	global.h	/^int BurnFlag=0; \/* 0: off, 1: on *\/$/;"	v
CDataFileHead	global.h	/^char CDataFileHead[D_FileNameMax]; \/* prefix of output files *\/$/;"	v
CParaFileHead	global.h	/^char CParaFileHead[D_FileNameMax]; \/* prefix for optimized variational parameters *\/$/;"	v
CalculateGreenFunc	calgrn.c	/^void CalculateGreenFunc(const double w, const double ip, int *eleIdx, int *eleCfg,$/;"	f
CalculateHamiltonian	calham.c	/^double CalculateHamiltonian(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateHamiltonian0	calham.c	/^double CalculateHamiltonian0(const int *eleNum) {$/;"	f
CalculateHamiltonian1	calham.c	/^double CalculateHamiltonian1(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateHamiltonian2	calham.c	/^double CalculateHamiltonian2(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateIP	qp.c	/^double CalculateIP(double * const pfM, const int qpStart, const int qpEnd, MPI_Comm comm) {$/;"	f
CalculateLogIP	qp.c	/^double CalculateLogIP(double * const pfM, const int qpStart, const int qpEnd, MPI_Comm comm) {$/;"	f
CalculateMAll	matrix.c	/^int CalculateMAll(const int *eleIdx, const int qpStart, const int qpEnd) {$/;"	f
CalculateNewPfM	pfupdate.c	/^void CalculateNewPfM(const int ma, const int s, double *pfMNew, const int *eleIdx,$/;"	f
CalculateNewPfM2	pfupdate.c	/^void CalculateNewPfM2(const int ma, const int s, double *pfMNew, const int *eleIdx,$/;"	f
CalculateNewPfMTwo	pfupdate_two.c	/^void CalculateNewPfMTwo(const int ma, const int s, const int mb, const int t,$/;"	f
CalculateNewPfMTwo2	pfupdate_two.c	/^void CalculateNewPfMTwo2(const int ma, const int s, const int mb, const int t,$/;"	f
CisAjsCktAltDCIdx	global.h	/^int NCisAjsCktAltDC, **CisAjsCktAltDCIdx; \/* [NCisAjsCktAltDC][6] *\/$/;"	v
CisAjsCktAltIdx	global.h	/^int NCisAjsCktAlt,   **CisAjsCktAltIdx;   \/* [NCisAjsCktAlt][8] *\/$/;"	v
CisAjsIdx	global.h	/^int NCisAjs,         **CisAjsIdx;         \/* [NCisAjs][3] *\/$/;"	v
CloseFile	initfile.c	/^void CloseFile(int rank) {$/;"	f
CloseFilePhysCal	initfile.c	/^void CloseFilePhysCal(int rank) {$/;"	f
CoulombInter	global.h	/^int **CoulombInter; \/* [NCoulombInter][2] *\/$/;"	v
CoulombIntra	global.h	/^int *CoulombIntra; \/* [NCoulombIntra] *\/$/;"	v
Counter	global.h	/^int Counter[4] = {0,0,0,0};$/;"	v
DSROptRedCut	global.h	/^double DSROptRedCut; \/* SR stabilizing factor for truncation of redundant directions *\/$/;"	v
DSROptStaDel	global.h	/^double DSROptStaDel; \/* SR stabiliaing factor for diagonal element modification *\/$/;"	v
DSROptStepDt	global.h	/^double DSROptStepDt; \/* step width of the SR method *\/$/;"	v
D_AmpMax	parameter.c	7;"	d	file:
D_FileNameMax	global.h	11;"	d
D_MpiSendMax	safempi.c	8;"	d	file:
D_PfLimit	matrix.c	26;"	d	file:
DoublonHolon2siteIdx	global.h	/^int NDoublonHolon2siteIdx, **DoublonHolon2siteIdx; \/* DoublonHolon2siteIdx[idx][2*Nsite] *\/$/;"	v
DoublonHolon4siteIdx	global.h	/^int NDoublonHolon4siteIdx, **DoublonHolon4siteIdx; \/* DoublonHolon4siteIdx[idx][4*Nsite] *\/$/;"	v
EXCHANGE	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
Ec	global.h	/^double Ec; \/* <H> *\/$/;"	v
Ec2	global.h	/^double Ec2; \/* <H> *\/$/;"	v
Eck	global.h	/^double Eck; \/* <H> *\/$/;"	v
Ek	global.h	/^double Ek; \/* <H> *\/$/;"	v
Ek2	global.h	/^double Ek2; \/* <H> *\/$/;"	v
EleCfg	global.h	/^int *EleCfg; \/* EleCfg[sample][ri+si*Nsite] *\/$/;"	v
EleIdx	global.h	/^int *EleIdx; \/* EleIdx[sample][mi+si*Ne] *\/$/;"	v
EleNum	global.h	/^int *EleNum; \/* EleIdx[sample][ri+si*Nsite] *\/$/;"	v
EleProjCnt	global.h	/^int *EleProjCnt; \/* EleProjCnt[sample][proj] *\/$/;"	v
Etot	global.h	/^double Etot; \/* <H> *\/$/;"	v
Etot2	global.h	/^double Etot2; \/* <H^2> *\/$/;"	v
ExchangeCoupling	global.h	/^int **ExchangeCoupling; \/* [NExchangeCoupling][2] *\/$/;"	v
FileCisAjs	global.h	/^FILE *FileCisAjs;$/;"	v
FileCisAjsCktAlt	global.h	/^FILE *FileCisAjsCktAlt;$/;"	v
FileCisAjsCktAltDC	global.h	/^FILE *FileCisAjsCktAltDC;$/;"	v
FileLS	global.h	/^FILE *FileLS;$/;"	v
FileLSQCisAjsCktAltQ	global.h	/^FILE *FileLSQCisAjsCktAltQ;$/;"	v
FileLSQCisAjsQ	global.h	/^FILE *FileLSQCisAjsQ;$/;"	v
FileLSQQQQ	global.h	/^FILE *FileLSQQQQ;$/;"	v
FileOut	global.h	/^FILE *FileOut;$/;"	v
FileSRinfo	global.h	/^FILE *FileSRinfo; \/* zvo_SRinfo.dat *\/$/;"	v
FileTime	global.h	/^FILE *FileTime;$/;"	v
FileVar	global.h	/^FILE *FileVar;$/;"	v
FlagBinary	global.h	/^int FlagBinary=0;$/;"	v
FlagOptTrans	global.h	/^int FlagOptTrans=0;$/;"	v
FlagShiftDH2	global.h	/^int FlagShiftDH2=0;$/;"	v
FlagShiftDH4	global.h	/^int FlagShiftDH4=0;$/;"	v
FlagShiftGJ	global.h	/^int FlagShiftGJ=0;$/;"	v
FlushFile	initfile.c	/^void FlushFile(int step, int rank) {$/;"	f
FreeMemory	setmemory.c	/^void FreeMemory() {$/;"	f
FreeMemoryDef	setmemory.c	/^void FreeMemoryDef() {$/;"	f
FreeWorkSpaceAll	workspace.c	/^void FreeWorkSpaceAll() {$/;"	f
GaussLeg	gauleg.c	/^void GaussLeg(const double x1, const double x2, double *x, double *w, const int n){$/;"	f
GaussLeg_EPS	gauleg.c	8;"	d	file:
GetWorkSpaceDouble	workspace.c	/^double* GetWorkSpaceDouble(int n) {$/;"	f
GetWorkSpaceInt	workspace.c	/^int* GetWorkSpaceInt(int n) {$/;"	f
GetWorkSpaceThreadDouble	workspace.c	/^double* GetWorkSpaceThreadDouble(int n) {$/;"	f
GetWorkSpaceThreadInt	workspace.c	/^int* GetWorkSpaceThreadInt(int n) {$/;"	f
GreenFunc1	locgrn.c	/^double GreenFunc1(const int ri, const int rj, const int s, const double ip,$/;"	f
GreenFunc2	locgrn.c	/^double GreenFunc2(const int ri, const int rj, const int rk, const int rl,$/;"	f
GreenFuncN	locgrn.c	/^double GreenFuncN(const int n, int *rsi, int *rsj, const double ip,$/;"	f
GutzwillerIdx	global.h	/^int NGutzwillerIdx, *GutzwillerIdx; \/* [Nsite] *\/$/;"	v
HOPPING	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
H_Store	global.h	/^double *H_Store;  \/* [NVMCSample] calculation buffar *\/$/;"	v
HcH_Store	global.h	/^double *HcH_Store;  \/* [NVMCSample] calculation buffar *\/$/;"	v
HkH_Store	global.h	/^double *HkH_Store;  \/* [NSplitSize*NVMCSample] calculation buffar *\/$/;"	v
HundCoupling	global.h	/^int **HundCoupling; \/* [NHundCoupling][2] *\/$/;"	v
InitFile	initfile.c	/^void InitFile(char *xNameListFile, int rank) {$/;"	f
InitFilePhysCal	initfile.c	/^void InitFilePhysCal(int i, int rank) {$/;"	f
InitParameter	parameter.c	/^void InitParameter() {$/;"	f
InitQPWeight	qp.c	/^void InitQPWeight() {$/;"	f
InitTimer	time.c	/^void InitTimer() {$/;"	f
InterAll	global.h	/^int **InterAll; \/* [NInterAll][6] *\/$/;"	v
InvM	global.h	/^double *InvM; \/* InvM[QPidx][mi+si*Ne][mj+sj*Ne] *\/$/;"	v
JastrowIdx	global.h	/^int NJastrowIdx, **JastrowIdx; \/* [Nsite][Nsite] *\/$/;"	v
LSHHHH	global.h	/^double *LSHHHH;  \/* [(3+NSplitSize)*(3+NSplitSize)] w + H + HcH + HkH *\/$/;"	v
LSHH_Store	global.h	/^double *LSHH_Store;  \/* [(3+NSplitSize)*NVMCSample] w + H + HcH + HkH *\/$/;"	v
LSLCisAjs	global.h	/^double *LSLCisAjs; \/* [NLSHam][NCisAjs]*\/$/;"	v
LSLQ	global.h	/^double *LSLQ; \/* [NLSHam][NLSHam]*\/$/;"	v
LSLocalCisAjs	lslocgrn.c	/^void LSLocalCisAjs(const double h1, const double ip, int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt) {$/;"	f
LSLocalQ	lslocgrn.c	/^void LSLocalQ(const double h1, const double ip, int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt$/;"	f
LSLocalQ_Store	lslocgrn.c	/^void LSLocalQ_Store(const double sqrtw, const double h1, const double ip, int *eleIdx, int *eleCfg, int *eleNum, $/;"	f
LapackLWork	global.h	/^int LapackLWork;$/;"	v
LegendrePoly	legendrepoly.c	/^double LegendrePoly(const double x, const int n){$/;"	f
LocSpn	global.h	/^int *LocSpn; \/* [Nsite] *\/$/;"	v
LocalCisAjs	global.h	/^double *LocalCisAjs; \/* [NCisAjs] *\/$/;"	v
LogProjRatio	projection.c	/^inline double LogProjRatio(const int *projCntNew, const int *projCntOld) {$/;"	f
LogProjVal	projection.c	/^inline double LogProjVal(const int *projCnt) {$/;"	f
MPI_Abort	vmcmain.h	/^inline void MPI_Abort(MPI_Comm comm, int errorcode) {exit(errorcode); return;}$/;"	f
MPI_Barrier	vmcmain.h	/^inline void MPI_Barrier(MPI_Comm comm) {return;}$/;"	f
MPI_COMM_WORLD	vmcmain.h	/^MPI_Comm MPI_COMM_WORLD=0;$/;"	v
MPI_Comm	vmcmain.h	/^typedef int MPI_Comm;$/;"	t
MPI_Comm_rank	vmcmain.h	/^inline void MPI_Comm_rank(MPI_Comm comm, int *rank) {*rank = 0; return;}$/;"	f
MPI_Comm_size	vmcmain.h	/^inline void MPI_Comm_size(MPI_Comm comm, int *size) {*size = 1; return;}$/;"	f
MPI_Finalize	vmcmain.h	/^inline void MPI_Finalize() {return;}$/;"	f
MPI_Init	vmcmain.h	/^inline void MPI_Init(int argc, char* argv[]) {return;}$/;"	f
M_DAXPY	vmccal.c	300;"	d	file:
M_DESCINIT	stcopt_pdposv.c	16;"	d	file:
M_DGER	vmccal.c	301;"	d	file:
M_DGETRF	matrix.c	13;"	d	file:
M_DGETRF	matrix.c	17;"	d	file:
M_DGETRF	matrix.c	21;"	d	file:
M_DGETRI	matrix.c	14;"	d	file:
M_DGETRI	matrix.c	18;"	d	file:
M_DGETRI	matrix.c	22;"	d	file:
M_DPOSV	stcopt_dposv.c	11;"	d	file:
M_DPOSV	stcopt_dposv.c	13;"	d	file:
M_DPOSV	stcopt_dposv.c	9;"	d	file:
M_DSKPFA	matrix.c	15;"	d	file:
M_DSKPFA	matrix.c	19;"	d	file:
M_DSKPFA	matrix.c	23;"	d	file:
M_NUMROC	stcopt_pdposv.c	15;"	d	file:
M_PDGEMV	stcopt_pdposv.c	10;"	d	file:
M_PDGEMV	stcopt_pdposv.c	13;"	d	file:
M_PDGEMV	stcopt_pdposv.c	19;"	d	file:
M_PDPOSV	stcopt_pdposv.c	18;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	12;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	17;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	9;"	d	file:
MakeProjCnt	projection.c	/^void MakeProjCnt(int *projCnt, const int *eleNum) {$/;"	f
NCisAjs	global.h	/^int NCisAjs,         **CisAjsIdx;         \/* [NCisAjs][3] *\/$/;"	v
NCisAjsCktAlt	global.h	/^int NCisAjsCktAlt,   **CisAjsCktAltIdx;   \/* [NCisAjsCktAlt][8] *\/$/;"	v
NCisAjsCktAltDC	global.h	/^int NCisAjsCktAltDC, **CisAjsCktAltDCIdx; \/* [NCisAjsCktAltDC][6] *\/$/;"	v
NCoulombInter	global.h	/^int NCoulombInter;$/;"	v
NCoulombIntra	global.h	/^int NCoulombIntra;$/;"	v
NDataIdxStart	global.h	/^int NDataIdxStart; \/* starting value of the file index *\/$/;"	v
NDataQtySmp	global.h	/^int NDataQtySmp; \/* the number of output files *\/$/;"	v
NDoublonHolon2siteIdx	global.h	/^int NDoublonHolon2siteIdx, **DoublonHolon2siteIdx; \/* DoublonHolon2siteIdx[idx][2*Nsite] *\/$/;"	v
NDoublonHolon4siteIdx	global.h	/^int NDoublonHolon4siteIdx, **DoublonHolon4siteIdx; \/* DoublonHolon4siteIdx[idx][4*Nsite] *\/$/;"	v
NExUpdatePath	global.h	/^int NExUpdatePath; \/* update by exchange hopping  0: off, 1: on *\/$/;"	v
NExchangeCoupling	global.h	/^int NExchangeCoupling;$/;"	v
NFileFlushInterval	global.h	/^int NFileFlushInterval=1;$/;"	v
NGutzwillerIdx	global.h	/^int NGutzwillerIdx, *GutzwillerIdx; \/* [Nsite] *\/$/;"	v
NHundCoupling	global.h	/^int NHundCoupling;$/;"	v
NInterAll	global.h	/^int NInterAll;$/;"	v
NJastrowIdx	global.h	/^int NJastrowIdx, **JastrowIdx; \/* [Nsite][Nsite] *\/$/;"	v
NLSHam	global.h	/^const int NLSHam = 2; \/* 0: I, 1: H *\/$/;"	v
NLanczosMode	global.h	/^int NLanczosMode; \/* mode of the single Lanczos step$/;"	v
NLocSpn	global.h	/^int NLocSpn; \/* the number of local spin *\/$/;"	v
NMPTrans	global.h	/^int NMPTrans; \/* the number of quantum projection for translation and point group symmetry *\/$/;"	v
NONE	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
NOptTrans	global.h	/^int NOptTrans; \/* the number of weights for OptTrans. This is used only for variatonal parameters *\/$/;"	v
NOrbitalIdx	global.h	/^int NOrbitalIdx, **OrbitalIdx; \/* [Nsite][Nsite] *\/$/;"	v
NPairHopping	global.h	/^int NPairHopping;$/;"	v
NPara	global.h	/^int NPara;    \/* the total number of variational prameters = NSlater + NProj + NOptTrans *\/$/;"	v
NProj	global.h	/^int NProj;    \/* the number of correlation factor *\/$/;"	v
NQPFix	global.h	/^int NQPFix; \/* for QPFixWeight NSPGaussLeg*NMPTranss *\/$/;"	v
NQPFull	global.h	/^int NQPFull; \/* the total number of quantum projection = NSPGaussLeg*NMPTrans*NQPTransOpt *\/$/;"	v
NQPOptTrans	global.h	/^int NQPOptTrans, **QPOptTrans; \/* [NQPOptTrans][Nsite] *\/$/;"	v
NQPTrans	global.h	/^int NQPTrans, **QPTrans; \/* [NQPTrans][Nsite] *\/$/;"	v
NSPGaussLeg	global.h	/^int NSPGaussLeg; \/* the number of points for the Gauss-Legendre quadrature *\/$/;"	v
NSPStot	global.h	/^int NSPStot; \/* S of Spin projection *\/$/;"	v
NSROptFixSmp	global.h	/^int NSROptFixSmp; \/* the number of SR method steps with fixed samples (1 is recommended) *\/$/;"	v
NSROptItrSmp	global.h	/^int NSROptItrSmp; \/* the number of SR method steps for calculation of average value *\/$/;"	v
NSROptItrStep	global.h	/^int NSROptItrStep; \/* the number of SR method steps *\/$/;"	v
NSlater	global.h	/^int NSlater;  \/* the number of pair orbital (f_ij) = NOrbitalIdx *\/$/;"	v
NSplitSize	global.h	/^int NSplitSize; \/* the number of inner MPI processes *\/$/;"	v
NStoreO	global.h	/^int NStoreO; \/* choice of store O: 0-> normal other-> store  *\/$/;"	v
NThread	global.h	/^int NThread;$/;"	v
NTimer	global.h	/^const int NTimer=100;$/;"	v
NTotalDefDouble	global.h	/^int NTotalDefInt, NTotalDefDouble;$/;"	v
NTotalDefInt	global.h	/^int NTotalDefInt, NTotalDefDouble;$/;"	v
NTransfer	global.h	/^int NTransfer;$/;"	v
NVMCCalMode	global.h	/^int NVMCCalMode; \/* calculation mode$/;"	v
NVMCIniterval	global.h	/^int NVMCIniterval; \/* sampling interval [MCS] *\/ $/;"	v
NVMCSample	global.h	/^int NVMCSample; \/* the number of samples *\/$/;"	v
NVMCWarmUp	global.h	/^int NVMCWarmUp; \/* Monte Carlo steps for warming up *\/$/;"	v
Ne	global.h	/^int Ne;    \/* the number of electrons with up spin *\/$/;"	v
Nsite	global.h	/^int Nsite; \/* the number of sites *\/$/;"	v
Nsite2	global.h	/^int Nsite2; \/* 2*Nsite *\/$/;"	v
Nsize	global.h	/^int Nsize; \/* the number of electrons = 2*Ne *\/$/;"	v
NumWorkSpaceDouble	workspace.c	/^int NumWorkSpaceDouble;$/;"	v
NumWorkSpaceInt	workspace.c	/^int NumWorkSpaceInt;$/;"	v
NumWorkSpaceThreadDouble	workspace.c	/^int NumWorkSpaceThreadDouble;$/;"	v
NumWorkSpaceThreadInt	workspace.c	/^int NumWorkSpaceThreadInt;$/;"	v
OptFlag	global.h	/^int *OptFlag; \/* [NPara]  1: optimized, 0 or 2: fixed *\/$/;"	v
OptTrans	global.h	/^double *OptTrans; \/* weights          (OptTrans=Para+NProj+NSlater) *\/$/;"	v
OrbitalIdx	global.h	/^int NOrbitalIdx, **OrbitalIdx; \/* [Nsite][Nsite] *\/$/;"	v
OrbitalSgn	global.h	/^int **OrbitalSgn; \/* OrbitalSgn[Nsite][Nsite] = +1 or -1 *\/$/;"	v
OutputOptData	avevar.c	/^void OutputOptData() {$/;"	f
OutputTime	time.c	/^void OutputTime(int step) {$/;"	f
OutputTimerParaOpt	time.c	/^void OutputTimerParaOpt() {$/;"	f
OutputTimerPhysCal	time.c	/^void OutputTimerPhysCal() {$/;"	f
PairHopping	global.h	/^int **PairHopping; \/* [NPairHopping][2] *\/$/;"	v
Para	global.h	/^double *Para;   \/* variatonal parameters *\/$/;"	v
ParaCoulombInter	global.h	/^double *ParaCoulombInter;$/;"	v
ParaCoulombIntra	global.h	/^double *ParaCoulombIntra;$/;"	v
ParaExchangeCoupling	global.h	/^double *ParaExchangeCoupling;$/;"	v
ParaHundCoupling	global.h	/^double *ParaHundCoupling;$/;"	v
ParaInterAll	global.h	/^double *ParaInterAll;$/;"	v
ParaPairHopping	global.h	/^double *ParaPairHopping;$/;"	v
ParaQPOptTrans	global.h	/^double *ParaQPOptTrans;$/;"	v
ParaQPTrans	global.h	/^double *ParaQPTrans;$/;"	v
ParaTransfer	global.h	/^double *ParaTransfer;$/;"	v
PfM	global.h	/^double *PfM; \/* PfM[QPidx] *\/$/;"	v
PhysCisAjs	global.h	/^double *PhysCisAjs; \/* [NCisAjs] *\/$/;"	v
PhysCisAjsCktAlt	global.h	/^double *PhysCisAjsCktAlt; \/* [NCisAjsCktAlt] *\/$/;"	v
PhysCisAjsCktAltDC	global.h	/^double *PhysCisAjsCktAltDC; \/* [NCisAjsCktAltDC] *\/$/;"	v
Proj	global.h	/^double *Proj;   \/* correlation factor (Proj    =Para) *\/$/;"	v
ProjRatio	projection.c	/^inline double ProjRatio(const int *projCntNew, const int *projCntOld) {$/;"	f
QCisAjsCktAltQ	global.h	/^double *QCisAjsCktAltQ; \/* QCisAjsCktAltQ[NLSHam][NLSHam][NCisAjsCktAlt]*\/$/;"	v
QCisAjsQ	global.h	/^double *QCisAjsQ; \/* QCisAjsQ[NLSHam][NLSHam][NCisAjs]*\/$/;"	v
QPFixWeight	global.h	/^double *QPFixWeight; \/* QPFixWeight[NQPFix] *\/$/;"	v
QPFullWeight	global.h	/^double *QPFullWeight; \/* QPFullWeight[NQPFull] *\/$/;"	v
QPOptTrans	global.h	/^int NQPOptTrans, **QPOptTrans; \/* [NQPOptTrans][Nsite] *\/$/;"	v
QPOptTransSgn	global.h	/^int **QPOptTransSgn; \/* QPOptTransSgn[NQPOptTrans][NSite] = +1 or -1 *\/$/;"	v
QPTrans	global.h	/^int NQPTrans, **QPTrans; \/* [NQPTrans][Nsite] *\/$/;"	v
QPTransSgn	global.h	/^int **QPTransSgn; \/* QPTransSgn[NQPTrans][NSite] = +1 or -1 *\/$/;"	v
QQQQ	global.h	/^double *QQQQ; \/* QQQQ[NLSHam][NLSHam][NLSHam][NLSHam]*\/$/;"	v
ReadDefFileError	readdef.c	/^int ReadDefFileError(char *defname){$/;"	f
ReadDefFileIdxPara	readdef.c	/^int ReadDefFileIdxPara(char *xNameListFile, MPI_Comm comm){$/;"	f
ReadDefFileNInt	readdef.c	/^int ReadDefFileNInt(char *xNameListFile, MPI_Comm comm){$/;"	f
ReadInitParameter	parameter.c	/^int ReadInitParameter(char *initFile) {$/;"	f
ReduceCounter	vmcmake.c	/^void ReduceCounter(MPI_Comm comm) {$/;"	f
ReleaseWorkSpaceDouble	workspace.c	/^void ReleaseWorkSpaceDouble() {$/;"	f
ReleaseWorkSpaceInt	workspace.c	/^void ReleaseWorkSpaceInt() {$/;"	f
ReleaseWorkSpaceThreadDouble	workspace.c	/^void ReleaseWorkSpaceThreadDouble() {$/;"	f
ReleaseWorkSpaceThreadInt	workspace.c	/^void ReleaseWorkSpaceThreadInt() {$/;"	f
RequestWorkSpaceDouble	workspace.c	/^void RequestWorkSpaceDouble(int n) {$/;"	f
RequestWorkSpaceInt	workspace.c	/^void RequestWorkSpaceInt(int n) {$/;"	f
RequestWorkSpaceThreadDouble	workspace.c	/^void RequestWorkSpaceThreadDouble(int n) {$/;"	f
RequestWorkSpaceThreadInt	workspace.c	/^void RequestWorkSpaceThreadInt(int n) {$/;"	f
RndSeed	global.h	/^int RndSeed; \/* seed for pseudorandom number generator *\/$/;"	v
SPGLCos	global.h	/^double *SPGLCos, *SPGLSin; \/* [NSPGaussLeg]  cos(beta\/2) and sin(beta\/2) *\/$/;"	v
SPGLCosCos	global.h	/^double *SPGLCosSin, *SPGLCosCos, *SPGLSinSin; \/* [NSPGaussLeg] *\/$/;"	v
SPGLCosSin	global.h	/^double *SPGLCosSin, *SPGLCosCos, *SPGLSinSin; \/* [NSPGaussLeg] *\/$/;"	v
SPGLSin	global.h	/^double *SPGLCos, *SPGLSin; \/* [NSPGaussLeg]  cos(beta\/2) and sin(beta\/2) *\/$/;"	v
SPGLSinSin	global.h	/^double *SPGLCosSin, *SPGLCosCos, *SPGLSinSin; \/* [NSPGaussLeg] *\/$/;"	v
SROptData	global.h	/^double *SROptData; \/* [2+NPara] storage for energy and variational parameters *\/$/;"	v
SROptHO	global.h	/^double *SROptHO; \/* [SROptSize]            < HO > *\/$/;"	v
SROptHcO	global.h	/^double *SROptHcO; \/* [SROptSize]            < HcO > *\/$/;"	v
SROptHkO	global.h	/^double *SROptHkO; \/* [SROptSize]            < HkO > *\/$/;"	v
SROptO	global.h	/^double *SROptO;  \/* [SROptSize] calculation buffar *\/$/;"	v
SROptOO	global.h	/^double *SROptOO; \/* [SROptSize*SROptSize] <O^\\dagger O> *\/$/;"	v
SROptO_Store	global.h	/^double *SROptO_Store;  \/* [SROptSize*NVMCSample] calculation buffar *\/$/;"	v
SROptSize	global.h	/^int SROptSize; \/* 1+NPara *\/$/;"	v
SafeMpiAllReduce	safempi.c	/^void SafeMpiAllReduce(double *send, double *recv, int nData, MPI_Comm comm) {$/;"	f
SafeMpiBcast	safempi.c	/^void SafeMpiBcast(double *buff, int nData, MPI_Comm comm) {$/;"	f
SafeMpiBcastInt	safempi.c	/^void SafeMpiBcastInt(int *buff, int nData, MPI_Comm comm) {$/;"	f
SafeMpiReduce	safempi.c	/^void SafeMpiReduce(double *send, double *recv, int nData, MPI_Comm comm) {$/;"	f
SetFlagShift	parameter.c	/^void SetFlagShift() {$/;"	f
SetMemory	setmemory.c	/^void SetMemory() {$/;"	f
SetMemoryDef	setmemory.c	/^void SetMemoryDef() {  $/;"	f
Slater	global.h	/^double *Slater; \/* pair orbital       (Slater  =Para+NProj) *\/$/;"	v
SlaterElm	global.h	/^double *SlaterElm; \/* SlaterElm[QPidx][ri+si*Nsite][rj+sj*Nsite] *\/$/;"	v
SlaterElmDiff	slater.c	/^void SlaterElmDiff(double *srOptO, const double ip, int *eleIdx) {$/;"	f
SplitLoop	splitloop.c	/^inline void SplitLoop(int *start, int *end,$/;"	f
StartTimer	time.c	/^void StartTimer(int n) {$/;"	f
StochasticOpt	stcopt_dposv.c	/^int StochasticOpt(MPI_Comm comm) {$/;"	f
StochasticOpt	stcopt_pdposv.c	/^int StochasticOpt(MPI_Comm comm) {$/;"	f
StopTimer	time.c	/^void StopTimer(int n) {$/;"	f
StoreOptData	avevar.c	/^void StoreOptData(int sample){$/;"	f
SyncModifiedParameter	parameter.c	/^void SyncModifiedParameter(MPI_Comm comm) {$/;"	f
Timer	global.h	/^double Timer[100], TimerStart[100];$/;"	v
TimerStart	global.h	/^double Timer[100], TimerStart[100];$/;"	v
TmpEleCfg	global.h	/^int *TmpEleCfg;$/;"	v
TmpEleIdx	global.h	/^int *TmpEleIdx;$/;"	v
TmpEleNum	global.h	/^int *TmpEleNum;$/;"	v
TmpEleProjCnt	global.h	/^int *TmpEleProjCnt;$/;"	v
Transfer	global.h	/^int **Transfer; \/* [NTransfer][3] *\/$/;"	v
UpdateMAll	pfupdate.c	/^void UpdateMAll(const int ma, const int s, const int *eleIdx,$/;"	f
UpdateMAllTwo	pfupdate_two.c	/^void UpdateMAllTwo(const int ma, const int s, const int mb, const int t,$/;"	f
UpdateProjCnt	projection.c	/^void UpdateProjCnt(const int ri, const int rj, const int s,$/;"	f
UpdateQPWeight	qp.c	/^void UpdateQPWeight() {$/;"	f
UpdateSlaterElm	slater.c	/^void UpdateSlaterElm() {$/;"	f
UpdateType	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE, NONE} UpdateType;$/;"	t	typeref:enum:__anon1	file:
VMCMainCal	vmccal.c	/^void VMCMainCal(MPI_Comm comm) {$/;"	f
VMCMakeSample	vmcmake.c	/^void VMCMakeSample(MPI_Comm comm) {$/;"	f
VMCParaOpt	vmcmain.c	/^int VMCParaOpt(MPI_Comm comm_parent, MPI_Comm comm_child1, MPI_Comm comm_child2) {$/;"	f
VMCPhysCal	vmcmain.c	/^int VMCPhysCal(MPI_Comm comm_parent, MPI_Comm comm_child1, MPI_Comm comm_child2) {$/;"	f
Wc	global.h	/^double Wc; \/* Weight for correlation sampling = <psi|x> *\/$/;"	v
WeightAverageGreenFunc	average.c	/^void WeightAverageGreenFunc(MPI_Comm comm) {$/;"	f
WeightAverageSROpt	average.c	/^void WeightAverageSROpt(MPI_Comm comm) {$/;"	f
WeightAverageWE	average.c	/^void WeightAverageWE(MPI_Comm comm) {$/;"	f
WorkSpaceDouble	workspace.c	/^double *WorkSpaceDouble;$/;"	v
WorkSpaceDoubleNow	workspace.c	/^double *WorkSpaceDoubleNow;$/;"	v
WorkSpaceInt	workspace.c	/^int *WorkSpaceInt;$/;"	v
WorkSpaceIntNow	workspace.c	/^int *WorkSpaceIntNow;$/;"	v
WorkSpaceThreadDouble	workspace.c	/^double **WorkSpaceThreadDouble;$/;"	v
WorkSpaceThreadDoubleNow	workspace.c	/^double **WorkSpaceThreadDoubleNow;$/;"	v
WorkSpaceThreadInt	workspace.c	/^int **WorkSpaceThreadInt;$/;"	v
WorkSpaceThreadIntNow	workspace.c	/^int **WorkSpaceThreadIntNow;$/;"	v
_INCLUDE_GLOBAL	global.h	9;"	d
_VMC_INCLUDE_FILES	vmcmain.h	9;"	d
calHCA	lslocgrn.c	/^double calHCA(const int ri, const int rj, const int s,$/;"	f
calHCA1	lslocgrn.c	/^double calHCA1(const int ri, const int rj, const int s,$/;"	f
calHCA2	lslocgrn.c	/^double calHCA2(const int ri, const int rj, const int s,$/;"	f
calHCACA	lslocgrn.c	/^double calHCACA(const int ri, const int rj, const int rk, const int rl,$/;"	f
calHCACA1	lslocgrn.c	/^double calHCACA1(const int ri, const int rj, const int rk, const int rl,$/;"	f
calHCACA2	lslocgrn.c	/^double calHCACA2(const int ri, const int rj, const int rk, const int rl,$/;"	f
calculateHHHH_Store	vmccal.c	/^void calculateHHHH_Store(double *lsHHHH, double *lsHH_Store, int lsSize, int sampleSize) {$/;"	f
calculateHK	lslocgrn.c	/^double calculateHK(const double h1, const double ip, int *eleIdx, int *eleCfg,$/;"	f
calculateHW	lslocgrn.c	/^double calculateHW(const double h1, const double ip, int *eleIdx, int *eleCfg,$/;"	f
calculateMAll_child	matrix.c	/^int calculateMAll_child(const int *eleIdx, const int qpStart, const int qpEnd, const int qpidx,$/;"	f
calculateNewPfMN_child	locgrn.c	/^double calculateNewPfMN_child(const int qpidx, const int n, const int *msa, const int *rsa,$/;"	f
calculateNewPfMTwo_child	pfupdate_two.c	/^void calculateNewPfMTwo_child(const int ma, const int s, const int mb, const int t,$/;"	f
calculateOO	vmccal.c	/^void calculateOO(double *srOptOO, double *srOptHO, const double *srOptO,$/;"	f
calculateOO_Store	vmccal.c	/^void calculateOO_Store(double *srOptOO, double *srOptO_Store,$/;"	f
calculateOptTransDiff	vmccal.c	/^void calculateOptTransDiff(double *srOptO, const double ipAll) {$/;"	f
calculateQCACAQ	vmccal.c	/^void calculateQCACAQ(double *qcacaq, const double *lslca, const double w,$/;"	f
calculateQCAQ	vmccal.c	/^void calculateQCAQ(double *qcaq, const double *lslca, const double *lslq,$/;"	f
calculateQQQQ	vmccal.c	/^void calculateQQQQ(double *qqqq, const double *lslq, const double w, const int nLSHam, const int size) {$/;"	f
calculateQQQQ_Store	vmccal.c	/^void calculateQQQQ_Store(double *qqqq, double *lsHHHH, const int nLSHam, const int nHHHH) {$/;"	f
checkGF1	lslocgrn.c	/^double checkGF1(const int ri, const int rj, const int s, const double ip,$/;"	f
checkGF2	lslocgrn.c	/^double checkGF2(const int ri, const int rj, const int rk, const int rl,$/;"	f
clearPhysQuantity	vmccal.c	/^void clearPhysQuantity(){$/;"	f
copyFromBurnSample	vmcmake.c	/^void copyFromBurnSample(int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt) {$/;"	f
copyMAll	lslocgrn.c	/^void copyMAll(double *invM_from, double *pfM_from, double *invM_to, double *pfM_to) {$/;"	f
copyToBurnSample	vmcmake.c	/^void copyToBurnSample(const int *eleIdx, const int *eleCfg, const int *eleNum, const int *eleProjCnt) {$/;"	f
fileCopyAdd	initfile.c	/^int fileCopyAdd(char *inputfileName, FILE *ofp){$/;"	f
getLWork	matrix.c	/^int getLWork() {$/;"	f
getUpdateType	vmcmake.c	/^UpdateType getUpdateType(int path) {$/;"	f
initMultiDefMode	vmcmain.c	/^void initMultiDefMode(int nMultiDef, char *fileDirList, MPI_Comm comm_parent, MPI_Comm *comm_child1) {$/;"	f
initializeWorkSpaceAll	workspace.c	/^void initializeWorkSpaceAll() {$/;"	f
logSqPfFullSlater	global.h	/^double *logSqPfFullSlater; \/* logSqPfFullSlater[sample] *\/$/;"	v
main	vmcmain.c	/^int main(int argc, char* argv[])$/;"	f
makeCandidate_exchange	vmcmake.c	/^void makeCandidate_exchange(int *mi_, int *ri_, int *rj_, int *s_, int *rejectFlag_,$/;"	f
makeCandidate_hopping	vmcmake.c	/^void makeCandidate_hopping(int *mi_, int *ri_, int *rj_, int *s_, int *rejectFlag_,$/;"	f
makeInitialSample	vmcmake.c	/^int makeInitialSample(int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt,$/;"	f
outputData	vmcmain.c	/^void outputData() {$/;"	f
printOption	vmcmain.c	/^void printOption() {$/;"	f
printUsageError	vmcmain.c	/^void printUsageError() {$/;"	f
revertEleConfig	vmcmake.c	/^void revertEleConfig(int mi, int ri, int rj, int s,$/;"	f
saveEleConfig	vmcmake.c	/^void saveEleConfig(const int sample, const double logIp,$/;"	f
shiftDH2	parameter.c	/^double shiftDH2() {$/;"	f
shiftDH4	parameter.c	/^double shiftDH4() {$/;"	f
shiftGJ	parameter.c	/^void shiftGJ() {$/;"	f
sortEleConfig	vmcmake.c	/^void sortEleConfig(int *eleIdx, int *eleCfg, const int *eleNum) {$/;"	f
stcOptInit	stcopt_dposv.c	/^void stcOptInit(double *const s, double *const g, const int nSmat, int *const smatToParaIdx) {$/;"	f
stcOptMain	stcopt_dposv.c	/^int stcOptMain(double *const s, double *const g, const int nSmat) {$/;"	f
stcOptMain	stcopt_pdposv.c	/^int stcOptMain(double *r, const int nSmat, const int *smatToParaIdx, MPI_Comm comm) {$/;"	f
updateEleConfig	vmcmake.c	/^void updateEleConfig(int mi, int ri, int rj, int s,$/;"	f
updateMAllTwo_child	pfupdate_two.c	/^void updateMAllTwo_child(const int ma, const int s, const int mb, const int t,$/;"	f
updateMAll_child	pfupdate.c	/^void updateMAll_child(const int ma, const int s, const int *eleIdx,$/;"	f
w_Store	global.h	/^double *w_Store;  \/* [NVMCSample] calculation buffar *\/$/;"	v
weightAverageReduce	average.c	/^void weightAverageReduce(int n, double *vec, MPI_Comm comm) {$/;"	f
writeConfig	initfile.c	/^void writeConfig(char *xnamefile, char *fileName) {$/;"	f
