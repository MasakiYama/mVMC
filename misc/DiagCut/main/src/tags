!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
CalculateGreenFunc	calgrn.c	/^void CalculateGreenFunc(const double w, const double ip, int *eleIdx, int *eleCfg,$/;"	f
CalculateHamiltonian	calham.c	/^double CalculateHamiltonian(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateHamiltonian0	calham.c	/^double CalculateHamiltonian0(const int *eleNum) {$/;"	f
CalculateHamiltonian1	calham.c	/^double CalculateHamiltonian1(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateHamiltonian2	calham.c	/^double CalculateHamiltonian2(const double ip, int *eleIdx, const int *eleCfg,$/;"	f
CalculateIP	qp.c	/^double CalculateIP(double * const pfM, const int qpStart, const int qpEnd, MPI_Comm comm) {$/;"	f
CalculateLogIP	qp.c	/^double CalculateLogIP(double * const pfM, const int qpStart, const int qpEnd, MPI_Comm comm) {$/;"	f
CalculateMAll	matrix.c	/^int CalculateMAll(const int *eleIdx, const int qpStart, const int qpEnd) {$/;"	f
CalculateNewPfM	pfupdate.c	/^void CalculateNewPfM(const int ma, const int s, double *pfMNew, const int *eleIdx,$/;"	f
CalculateNewPfM2	pfupdate.c	/^void CalculateNewPfM2(const int ma, const int s, double *pfMNew, const int *eleIdx,$/;"	f
CalculateNewPfMTwo	pfupdate_two.c	/^void CalculateNewPfMTwo(const int ma, const int s, const int mb, const int t,$/;"	f
CalculateNewPfMTwo2	pfupdate_two.c	/^void CalculateNewPfMTwo2(const int ma, const int s, const int mb, const int t,$/;"	f
CloseFile	initfile.c	/^void CloseFile(int rank) {$/;"	f
CloseFilePhysCal	initfile.c	/^void CloseFilePhysCal(int rank) {$/;"	f
D_AmpMax	parameter.c	7;"	d	file:
D_MpiSendMax	safempi.c	8;"	d	file:
D_PfLimit	matrix.c	26;"	d	file:
EXCHANGE	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE,PAIREXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
FlushFile	initfile.c	/^void FlushFile(int step, int rank) {$/;"	f
FreeMemory	setmemory.c	/^void FreeMemory() {$/;"	f
FreeMemoryDef	setmemory.c	/^void FreeMemoryDef() {$/;"	f
FreeWorkSpaceAll	workspace.c	/^void FreeWorkSpaceAll() {$/;"	f
GaussLeg	gauleg.c	/^void GaussLeg(const double x1, const double x2, double *x, double *w, const int n){$/;"	f
GaussLeg_EPS	gauleg.c	8;"	d	file:
GetWorkSpaceDouble	workspace.c	/^double* GetWorkSpaceDouble(int n) {$/;"	f
GetWorkSpaceInt	workspace.c	/^int* GetWorkSpaceInt(int n) {$/;"	f
GetWorkSpaceThreadDouble	workspace.c	/^double* GetWorkSpaceThreadDouble(int n) {$/;"	f
GetWorkSpaceThreadInt	workspace.c	/^int* GetWorkSpaceThreadInt(int n) {$/;"	f
GreenFunc1	locgrn.c	/^double GreenFunc1(const int ri, const int rj, const int s, const double ip,$/;"	f
GreenFunc2	locgrn.c	/^double GreenFunc2(const int ri, const int rj, const int rk, const int rl,$/;"	f
GreenFuncN	locgrn.c	/^double GreenFuncN(const int n, int *rsi, int *rsj, const double ip,$/;"	f
HOPPING	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE,PAIREXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
InitFile	initfile.c	/^void InitFile(char *xNameListFile, int rank) {$/;"	f
InitFilePhysCal	initfile.c	/^void InitFilePhysCal(int i, int rank) {$/;"	f
InitParameter	parameter.c	/^void InitParameter() {$/;"	f
InitQPWeight	qp.c	/^void InitQPWeight() {$/;"	f
InitTimer	time.c	/^void InitTimer() {$/;"	f
LSLocalCisAjs	lslocgrn.c	/^void LSLocalCisAjs(const double h1, const double ip, int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt) {$/;"	f
LSLocalQ	lslocgrn.c	/^void LSLocalQ(const double h1, const double ip, int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt) {$/;"	f
LegendrePoly	legendrepoly.c	/^double LegendrePoly(const double x, const int n){$/;"	f
LogProjRatio	projection.c	/^inline double LogProjRatio(const int *projCntNew, const int *projCntOld) {$/;"	f
LogProjVal	projection.c	/^inline double LogProjVal(const int *projCnt) {$/;"	f
M_DAXPY	vmccal.c	223;"	d	file:
M_DESCINIT	stcopt_pdposv.c	16;"	d	file:
M_DGER	vmccal.c	224;"	d	file:
M_DGETRF	matrix.c	13;"	d	file:
M_DGETRF	matrix.c	17;"	d	file:
M_DGETRF	matrix.c	21;"	d	file:
M_DGETRI	matrix.c	14;"	d	file:
M_DGETRI	matrix.c	18;"	d	file:
M_DGETRI	matrix.c	22;"	d	file:
M_DPOSV	stcopt_dposv.c	11;"	d	file:
M_DPOSV	stcopt_dposv.c	13;"	d	file:
M_DPOSV	stcopt_dposv.c	9;"	d	file:
M_DSKPFA	matrix.c	15;"	d	file:
M_DSKPFA	matrix.c	19;"	d	file:
M_DSKPFA	matrix.c	23;"	d	file:
M_NUMROC	stcopt_pdposv.c	15;"	d	file:
M_PDGEMV	stcopt_pdposv.c	10;"	d	file:
M_PDGEMV	stcopt_pdposv.c	13;"	d	file:
M_PDGEMV	stcopt_pdposv.c	19;"	d	file:
M_PDPOSV	stcopt_pdposv.c	18;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	12;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	17;"	d	file:
M_PDSYEVD	stcopt_pdposv.c	9;"	d	file:
MakeProjCnt	projection.c	/^void MakeProjCnt(int *projCnt, const int *eleNum) {$/;"	f
NONE	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE,PAIREXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
NumWorkSpaceDouble	workspace.c	/^int NumWorkSpaceDouble;$/;"	v
NumWorkSpaceInt	workspace.c	/^int NumWorkSpaceInt;$/;"	v
NumWorkSpaceThreadDouble	workspace.c	/^int NumWorkSpaceThreadDouble;$/;"	v
NumWorkSpaceThreadInt	workspace.c	/^int NumWorkSpaceThreadInt;$/;"	v
OutputOptData	avevar.c	/^void OutputOptData() {$/;"	f
OutputTime	time.c	/^void OutputTime(int step) {$/;"	f
OutputTimerParaOpt	time.c	/^void OutputTimerParaOpt() {$/;"	f
OutputTimerPhysCal	time.c	/^void OutputTimerPhysCal() {$/;"	f
PAIREXCHANGE	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE,PAIREXCHANGE, NONE} UpdateType;$/;"	e	enum:__anon1	file:
ProjRatio	projection.c	/^inline double ProjRatio(const int *projCntNew, const int *projCntOld) {$/;"	f
ReadDefFileError	readdef.c	/^int ReadDefFileError(char *defname){$/;"	f
ReadDefFileIdxPara	readdef.c	/^int ReadDefFileIdxPara(char *xNameListFile, MPI_Comm comm){$/;"	f
ReadDefFileNInt	readdef.c	/^int ReadDefFileNInt(char *xNameListFile, MPI_Comm comm){$/;"	f
ReadInitParameter	parameter.c	/^int ReadInitParameter(char *initFile) {$/;"	f
ReduceCounter	vmcmake.c	/^void ReduceCounter(MPI_Comm comm) {$/;"	f
ReleaseWorkSpaceDouble	workspace.c	/^void ReleaseWorkSpaceDouble() {$/;"	f
ReleaseWorkSpaceInt	workspace.c	/^void ReleaseWorkSpaceInt() {$/;"	f
ReleaseWorkSpaceThreadDouble	workspace.c	/^void ReleaseWorkSpaceThreadDouble() {$/;"	f
ReleaseWorkSpaceThreadInt	workspace.c	/^void ReleaseWorkSpaceThreadInt() {$/;"	f
RequestWorkSpaceDouble	workspace.c	/^void RequestWorkSpaceDouble(int n) {$/;"	f
RequestWorkSpaceInt	workspace.c	/^void RequestWorkSpaceInt(int n) {$/;"	f
RequestWorkSpaceThreadDouble	workspace.c	/^void RequestWorkSpaceThreadDouble(int n) {$/;"	f
RequestWorkSpaceThreadInt	workspace.c	/^void RequestWorkSpaceThreadInt(int n) {$/;"	f
SafeMpiAllReduce	safempi.c	/^void SafeMpiAllReduce(double *send, double *recv, int nData, MPI_Comm comm) {$/;"	f
SafeMpiBcast	safempi.c	/^void SafeMpiBcast(double *buff, int nData, MPI_Comm comm) {$/;"	f
SafeMpiBcastInt	safempi.c	/^void SafeMpiBcastInt(int *buff, int nData, MPI_Comm comm) {$/;"	f
SafeMpiReduce	safempi.c	/^void SafeMpiReduce(double *send, double *recv, int nData, MPI_Comm comm) {$/;"	f
SetFlagShift	parameter.c	/^void SetFlagShift() {$/;"	f
SetMemory	setmemory.c	/^void SetMemory() {$/;"	f
SetMemoryDef	setmemory.c	/^void SetMemoryDef() {  $/;"	f
SlaterElmDiff	slater.c	/^void SlaterElmDiff(double *srOptO, const double ip, int *eleIdx) {$/;"	f
SplitLoop	splitloop.c	/^inline void SplitLoop(int *start, int *end,$/;"	f
StartTimer	time.c	/^void StartTimer(int n) {$/;"	f
StochasticOpt	stcopt_dposv.c	/^int StochasticOpt(MPI_Comm comm) {$/;"	f
StochasticOpt	stcopt_pdposv.c	/^int StochasticOpt(MPI_Comm comm) {$/;"	f
StopTimer	time.c	/^void StopTimer(int n) {$/;"	f
StoreOptData	avevar.c	/^void StoreOptData(int sample){$/;"	f
SyncModifiedParameter	parameter.c	/^void SyncModifiedParameter(MPI_Comm comm) {$/;"	f
UpdateMAll	pfupdate.c	/^void UpdateMAll(const int ma, const int s, const int *eleIdx,$/;"	f
UpdateMAllTwo	pfupdate_two.c	/^void UpdateMAllTwo(const int ma, const int s, const int mb, const int t,$/;"	f
UpdateProjCnt	projection.c	/^void UpdateProjCnt(const int ri, const int rj, const int s,$/;"	f
UpdateQPWeight	qp.c	/^void UpdateQPWeight() {$/;"	f
UpdateSlaterElm	slater.c	/^void UpdateSlaterElm() {$/;"	f
UpdateType	vmcmake.c	/^typedef enum {HOPPING, EXCHANGE,PAIREXCHANGE, NONE} UpdateType;$/;"	t	typeref:enum:__anon1	file:
VMCMainCal	vmccal.c	/^void VMCMainCal(MPI_Comm comm) {$/;"	f
VMCMakeSample	vmcmake.c	/^void VMCMakeSample(MPI_Comm comm) {$/;"	f
VMCParaOpt	vmcmain.c	/^int VMCParaOpt(MPI_Comm comm_parent, MPI_Comm comm_child1, MPI_Comm comm_child2) {$/;"	f
VMCPhysCal	vmcmain.c	/^int VMCPhysCal(MPI_Comm comm_parent, MPI_Comm comm_child1, MPI_Comm comm_child2) {$/;"	f
WeightAverageGreenFunc	average.c	/^void WeightAverageGreenFunc(MPI_Comm comm) {$/;"	f
WeightAverageSROpt	average.c	/^void WeightAverageSROpt(MPI_Comm comm) {$/;"	f
WeightAverageWE	average.c	/^void WeightAverageWE(MPI_Comm comm) {$/;"	f
WorkSpaceDouble	workspace.c	/^double *WorkSpaceDouble;$/;"	v
WorkSpaceDoubleNow	workspace.c	/^double *WorkSpaceDoubleNow;$/;"	v
WorkSpaceInt	workspace.c	/^int *WorkSpaceInt;$/;"	v
WorkSpaceIntNow	workspace.c	/^int *WorkSpaceIntNow;$/;"	v
WorkSpaceThreadDouble	workspace.c	/^double **WorkSpaceThreadDouble;$/;"	v
WorkSpaceThreadDoubleNow	workspace.c	/^double **WorkSpaceThreadDoubleNow;$/;"	v
WorkSpaceThreadInt	workspace.c	/^int **WorkSpaceThreadInt;$/;"	v
WorkSpaceThreadIntNow	workspace.c	/^int **WorkSpaceThreadIntNow;$/;"	v
calHCA	lslocgrn.c	/^double calHCA(const int ri, const int rj, const int s,$/;"	f
calHCA1	lslocgrn.c	/^double calHCA1(const int ri, const int rj, const int s,$/;"	f
calHCA2	lslocgrn.c	/^double calHCA2(const int ri, const int rj, const int s,$/;"	f
calHCACA	lslocgrn.c	/^double calHCACA(const int ri, const int rj, const int rk, const int rl,$/;"	f
calHCACA1	lslocgrn.c	/^double calHCACA1(const int ri, const int rj, const int rk, const int rl,$/;"	f
calHCACA2	lslocgrn.c	/^double calHCACA2(const int ri, const int rj, const int rk, const int rl,$/;"	f
calculateHK	lslocgrn.c	/^double calculateHK(const double h1, const double ip, int *eleIdx, int *eleCfg,$/;"	f
calculateHW	lslocgrn.c	/^double calculateHW(const double h1, const double ip, int *eleIdx, int *eleCfg,$/;"	f
calculateMAll_child	matrix.c	/^int calculateMAll_child(const int *eleIdx, const int qpStart, const int qpEnd, const int qpidx,$/;"	f
calculateNewPfMN_child	locgrn.c	/^double calculateNewPfMN_child(const int qpidx, const int n, const int *msa, const int *rsa,$/;"	f
calculateNewPfMTwo_child	pfupdate_two.c	/^void calculateNewPfMTwo_child(const int ma, const int s, const int mb, const int t,$/;"	f
calculateOO	vmccal.c	/^void calculateOO(double *srOptOO, double *srOptHO, const double *srOptO,$/;"	f
calculateOO_Store	vmccal.c	/^void calculateOO_Store(double *srOptOO, double *srOptHO, double *srOptO_Store,$/;"	f
calculateOptTransDiff	vmccal.c	/^void calculateOptTransDiff(double *srOptO, const double ipAll) {$/;"	f
calculateQCACAQ	vmccal.c	/^void calculateQCACAQ(double *qcacaq, const double *lslca, const double w,$/;"	f
calculateQCAQ	vmccal.c	/^void calculateQCAQ(double *qcaq, const double *lslca, const double *lslq,$/;"	f
calculateQQQQ	vmccal.c	/^void calculateQQQQ(double *qqqq, const double *lslq, const double w, const int nLSHam) {$/;"	f
checkGF1	lslocgrn.c	/^double checkGF1(const int ri, const int rj, const int s, const double ip,$/;"	f
checkGF2	lslocgrn.c	/^double checkGF2(const int ri, const int rj, const int rk, const int rl,$/;"	f
clearPhysQuantity	vmccal.c	/^void clearPhysQuantity(){$/;"	f
copyFromBurnSample	vmcmake.c	/^void copyFromBurnSample(int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt) {$/;"	f
copyMAll	lslocgrn.c	/^void copyMAll(double *invM_from, double *pfM_from, double *invM_to, double *pfM_to) {$/;"	f
copyToBurnSample	vmcmake.c	/^void copyToBurnSample(const int *eleIdx, const int *eleCfg, const int *eleNum, const int *eleProjCnt) {$/;"	f
fileCopyAdd	initfile.c	/^int fileCopyAdd(char *inputfileName, FILE *ofp){$/;"	f
getLWork	matrix.c	/^int getLWork() {$/;"	f
getUpdateType	vmcmake.c	/^UpdateType getUpdateType(int path) {$/;"	f
initMultiDefMode	vmcmain.c	/^void initMultiDefMode(int nMultiDef, char *fileDirList, MPI_Comm comm_parent, MPI_Comm *comm_child1) {$/;"	f
initializeWorkSpaceAll	workspace.c	/^void initializeWorkSpaceAll() {$/;"	f
main	vmcmain.c	/^int main(int argc, char* argv[])$/;"	f
makeCandidate_exchange	vmcmake.c	/^void makeCandidate_exchange(int *mi_, int *ri_, int *rj_, int *s_, int *rejectFlag_,$/;"	f
makeCandidate_hopping	vmcmake.c	/^void makeCandidate_hopping(int *mi_, int *ri_, int *rj_, int *s_, int *rejectFlag_,$/;"	f
makeCandidate_pairexchange	vmcmake.c	/^void makeCandidate_pairexchange(int *ri_, int *rj_, int *rejectFlag_,const int *eleIdx, const int *eleCfg, const int *eleNum) {$/;"	f
makeInitialSample	vmcmake.c	/^int makeInitialSample(int *eleIdx, int *eleCfg, int *eleNum, int *eleProjCnt,$/;"	f
outputData	vmcmain.c	/^void outputData() {$/;"	f
printOption	vmcmain.c	/^void printOption() {$/;"	f
printUsageError	vmcmain.c	/^void printUsageError() {$/;"	f
revertEleConfig	vmcmake.c	/^void revertEleConfig(int mi, int ri, int rj, int s,$/;"	f
saveEleConfig	vmcmake.c	/^void saveEleConfig(const int sample, const double logIp,$/;"	f
shiftDH2	parameter.c	/^double shiftDH2() {$/;"	f
shiftDH4	parameter.c	/^double shiftDH4() {$/;"	f
shiftGJ	parameter.c	/^void shiftGJ() {$/;"	f
sortEleConfig	vmcmake.c	/^void sortEleConfig(int *eleIdx, int *eleCfg, const int *eleNum) {$/;"	f
stcOptInit	stcopt_dposv.c	/^void stcOptInit(double *const s, double *const g, const int nSmat, int *const smatToParaIdx) {$/;"	f
stcOptMain	stcopt_dposv.c	/^int stcOptMain(double *const s, double *const g, const int nSmat) {$/;"	f
stcOptMain	stcopt_pdposv.c	/^int stcOptMain(double *r, const int nSmat, const int *smatToParaIdx, MPI_Comm comm) {$/;"	f
updateEleConfig	vmcmake.c	/^void updateEleConfig(int mi, int ri, int rj, int s,$/;"	f
updateMAllTwo_child	pfupdate_two.c	/^void updateMAllTwo_child(const int ma, const int s, const int mb, const int t,$/;"	f
updateMAll_child	pfupdate.c	/^void updateMAll_child(const int ma, const int s, const int *eleIdx,$/;"	f
weightAverageReduce	average.c	/^void weightAverageReduce(int n, double *vec, MPI_Comm comm) {$/;"	f
writeConfig	initfile.c	/^void writeConfig(char *xnamefile, char *fileName) {$/;"	f
